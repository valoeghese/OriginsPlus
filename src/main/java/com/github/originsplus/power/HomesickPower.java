package com.github.originsplus.power;

import java.util.UUID;

import io.github.apace100.apoli.power.Power;
import io.github.apace100.apoli.power.PowerType;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.attribute.EntityAttributeModifier;
import net.minecraft.entity.attribute.EntityAttributeModifier.Operation;
import net.minecraft.entity.attribute.EntityAttributes;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtElement;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;

public class HomesickPower extends Power {
	public HomesickPower(PowerType<?> type, LivingEntity player) {
		super(type, player);
		this.level = player instanceof ServerPlayerEntity ? this.getAdventureLevel() : AdventureLevel.FAR_FROM_HOME;
		this.setTicking();
	}

	private AdventureLevel level;

	// SERVER SIDE ONLY

	private AdventureLevel getAdventureLevel() {
		ServerPlayerEntity player = (ServerPlayerEntity) this.entity;


		if (player.getEntityWorld().getRegistryKey().equals(player.getSpawnPointDimension())) {
			BlockPos spawnPos = player.getSpawnPointPosition();

			if (spawnPos == null) {
				spawnPos = BlockPos.ORIGIN;
			}

			double sqrdistance = player.getPos().multiply(1, 0, 1).squaredDistanceTo(new Vec3d(spawnPos.getX(), 0, spawnPos.getZ()));

			if (sqrdistance > 12000 * 12000) {
				return AdventureLevel.FAR_FROM_HOME;
			} else if (sqrdistance > 4000 * 4000) {
				return AdventureLevel.JOURNEY;
			} else if (sqrdistance > 800 * 800) {
				return AdventureLevel.WOP_WOPS;
			} else if (sqrdistance > 200 * 200) {
				return AdventureLevel.NEIGHBOURHOOD;
			} else {
				return AdventureLevel.HOME;
			}
		} else {
			return AdventureLevel.FAR_FROM_HOME;
		}
	}

	private void removeAdventureLevel() {
		ServerPlayerEntity player = (ServerPlayerEntity) this.entity;

		player.getAttributeInstance(EntityAttributes.GENERIC_ARMOR).removeModifier(HOBBIT_ARMOUR);
		player.getAttributeInstance(EntityAttributes.GENERIC_ATTACK_SPEED).removeModifier(HOBBIT_MINING);
		player.getAttributeInstance(EntityAttributes.GENERIC_MOVEMENT_SPEED).removeModifier(HOBBIT_MOVEMENT);
	}

	private void applyAdventureLevel(AdventureLevel level) {
		ServerPlayerEntity player = (ServerPlayerEntity) this.entity;
		this.level = level;

		if (player.getAttributeInstance(EntityAttributes.GENERIC_MOVEMENT_SPEED).hasModifier(AdventureLevel.HOME.armour)) { // it only cares about uuid so HOME is arbitrary
			this.removeAdventureLevel();
		}

		// attribute power seems to use temporary stuff. probably because they use autogenerated UUIDs, but I will since onLost() runs in funky places.
		player.getAttributeInstance(EntityAttributes.GENERIC_ARMOR).addTemporaryModifier(level.armour);
		player.getAttributeInstance(EntityAttributes.GENERIC_ATTACK_SPEED).addTemporaryModifier(level.miningSpeed);
		player.getAttributeInstance(EntityAttributes.GENERIC_MOVEMENT_SPEED).addTemporaryModifier(level.movementSpeed);
	}
	
	// END SERVER SIDE ONLY

	@Override
	public void tick() {
		if (this.entity instanceof ServerPlayerEntity) {
			if ((this.entity.age & 0b11) == 0) { // don't run too often
				AdventureLevel level = this.getAdventureLevel();

				if (level == AdventureLevel.FAR_FROM_HOME) {
					((ServerPlayerEntity) this.entity).addExhaustion(0.1f);
				} else if (level == AdventureLevel.JOURNEY) {
					((ServerPlayerEntity) this.entity).addExhaustion(0.05f);
				}

				if (level != this.level) {
					this.applyAdventureLevel(level);
				}
			}
		}
	}

	@Override
	public void fromTag(NbtElement tag) {
		if (tag instanceof NbtCompound) {
			this.level = AdventureLevel.values()[((NbtCompound) tag).getInt("adventure_level")];
		}
	}

	@Override
	public NbtElement toTag() {
		NbtCompound result = new NbtCompound();
		result.putInt("adventure_level", this.level.ordinal());
		return result;
	}

	@Override
	public void onAdded() {
		if (this.entity instanceof ServerPlayerEntity) {
			this.applyAdventureLevel(this.getAdventureLevel());
		}
	}

	@Override
	public void onRemoved() {
		if (this.entity instanceof ServerPlayerEntity) {
			this.removeAdventureLevel();
		}
	}

	private static final UUID HOBBIT_ARMOUR = UUID.fromString("7a6b00d0-0196-4c23-b5c1-1e341fab8e71");
	private static final UUID HOBBIT_MINING = UUID.fromString("e27620bd-d955-4acc-9543-d42b511eeef4");
	private static final UUID HOBBIT_MOVEMENT = UUID.fromString("3a9b91d0-265e-4431-8273-5e6c8af7a37d");

	private enum AdventureLevel {
		HOME(1.15, 1.25, 1.25),
		NEIGHBOURHOOD(1.1, 1.0, 1.0),
		WOP_WOPS(1.05, 0.85, 0.9),
		JOURNEY(1.0, 0.7, 0.8),
		FAR_FROM_HOME(1.0, 0.5, 0.7);

		private AdventureLevel(double armour, double miningSpeed, double movementSpeed) {
			// dumb mc does the 1 + thing for the multiplier so I made it make sense
			this.armour = new EntityAttributeModifier(HOBBIT_ARMOUR, "hobbit_armour", armour - 1, Operation.MULTIPLY_TOTAL);
			this.miningSpeed = new EntityAttributeModifier(HOBBIT_MINING, "hobbit_mining", miningSpeed - 1, Operation.MULTIPLY_TOTAL);
			this.movementSpeed = new EntityAttributeModifier(HOBBIT_MOVEMENT, "hobbit_movement", movementSpeed - 1, Operation.MULTIPLY_TOTAL);
		}

		private EntityAttributeModifier armour;
		private EntityAttributeModifier miningSpeed;
		private EntityAttributeModifier movementSpeed;
	}
}
